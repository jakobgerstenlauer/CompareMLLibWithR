//This code is based on a code snippet from: 
//https://spark.apache.org/docs/1.1.0/mllib-linear-methods.html#linear-least-squares-lasso-and-ridge-regression
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.evaluation.RegressionMetrics
import org.apache.spark.mllib.regression.LinearRegressionModel
import org.apache.spark.mllib.regression.LassoWithSGD

//Check if a input line represents the header of the input file.
def isHeader(line: String) = line.contains("output");
 
//TODO Put the file name and path!
var fileName = "foo.txt"
var path = "file:///home/.../data/"
println("Reading data from file: " + fileName)
val data = sc.textFile(path + fileName).filter(!isHeader(_))

val parsedData = data.map { line =>
  val parts = line.split(';')
  LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))
}.cache()

// Building the model
val numIterations = 10000
val stepSize = 0.01

//Store the optimal value of the regularization parameter lambda 
//and the associated coefficient of determination:
var best_lambda = -1.0
var best_r2 = -1.0

//Loop over grid of values for lambda.
for( x <- 1 to 10){
 
var lambda = 1.0/(x*x)
println("Lambda: " + lambda)

val model = LassoWithSGD.train(parsedData, numIterations, stepSize, lambda)

// Evaluate model on training examples and compute training error
val valuesAndPreds = parsedData.map { point =>
  val prediction = model.predict(point.features)
  (point.label, prediction)
}

val MSE = valuesAndPreds.map{ case(v, p) => math.pow((v - p), 2) }.mean()
println("training Mean Squared Error by hand: " + MSE)

val global_mean = valuesAndPreds.map{ case(v, p) => v }.mean()
val SQ_null = valuesAndPreds.map{ case(v,p) => math.pow((v - global_mean), 2) }.sum()
val SQ = valuesAndPreds.map{ case(v, p) => math.pow((v - p), 2) }.sum()
var R2 = (SQ_null - SQ) / SQ_null
println("coefficient of determination by hand: " + R2)

// Instantiate metrics object
val metrics = new RegressionMetrics(valuesAndPreds)

// Squared error
println(s"MSE = ${metrics.meanSquaredError}")
println(s"RMSE = ${metrics.rootMeanSquaredError}")

// R-squared
println(s"R-squared = ${metrics.r2}")

// Mean absolute error
println(s"MAE = ${metrics.meanAbsoluteError}")

// Explained variance
println(s"Explained variance = ${metrics.explainedVariance}")

if(R2 > best_r2){
 best_lambda = lambda;
 best_r2 = R2;
}

}

