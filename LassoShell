//This code is based on a code snippet from: 
//https://spark.apache.org/docs/1.1.0/mllib-linear-methods.html#linear-least-squares-lasso-and-ridge-regression
import org.apache.spark.SparkContext
import org.apache.spark.SparkContext._
import org.apache.spark.SparkConf
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.regression.LinearRegressionModel
import org.apache.spark.mllib.regression.LassoWithSGD

def isHeader(line: String) = line.contains("output");
 
var fileName = "foo.txt"
var path = "file:///home/.../data/"
println("Reading data from file: " + fileName)
val data = sc.textFile(path + fileName).filter(!isHeader(_))

val parsedData = data.map { line =>
  val parts = line.split(';')
  LabeledPoint(parts(0).toDouble, Vectors.dense(parts(1).split(' ').map(_.toDouble)))
}.cache()

// Building the model
val numIterations = 100
val stepSize = 0.00000001
val model = LassoWithSGD.train(parsedData, numIterations, stepSize)

// Evaluate model on training examples and compute training error
val valuesAndPreds = parsedData.map { point =>
  val prediction = model.predict(point.features)
  (point.label, prediction)
}

val MSE = valuesAndPreds.map{ case(v, p) => math.pow((v - p), 2) }.mean()
println("training Mean Squared Error = " + MSE)

// Save and load model
//model.save(sc, "target/tmp/scalaLinearRegressionWithSGDModel")
//val sameModel = LinearRegressionModel.load(sc, "target/tmp/scalaLinearRegressionWithSGDModel")

